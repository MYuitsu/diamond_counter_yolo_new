//X·ª¨ L√ù T√çNH NƒÇNG T·ª∞ ƒê·ªòNG ƒê·∫æM KIM C∆Ø∆†NG V·ªöI KHAY
// T·∫°o m·ªôt bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ v√πng khay
window.trayRegion = null;
// H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng x√°c nh·∫≠n v√πng khay
// region_x, region_y, region_w, region_h l√† t·ªça ƒë·ªô v√† k√≠ch th∆∞·ªõc c·ªßa v√πng khay
// tray_width, tray_length l√† k√≠ch th∆∞·ªõc c·ªßa khay
function startAutoCountWithTray(region_x, region_y, region_w, region_h, tray_width, tray_length) {
    window.trayRegion = { region_x, region_y, region_w, region_h, tray_width, tray_length };
    autoCountDiamonds();
}
// H√†m n√†y s·∫Ω t·ª± ƒë·ªông ƒë·∫øm kim c∆∞∆°ng trong v√πng ƒë√£ ch·ªçn
// N√≥ s·∫Ω g·ª≠i y√™u c·∫ßu ƒë·∫øn server ƒë·ªÉ x·ª≠ l√Ω ·∫£nh v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
async function autoCountDiamonds() {
    setUIEnabled(false);
    try {
        await fetch("/reset", { method: "POST" });
        const canvas = document.getElementById("canvasUpload");
        const partSize = parseInt(document.getElementById("partSizeSelect").value);
        const stride = partSize / 2;

        let region_x = 0, region_y = 0, region_w = canvas.width, region_h = canvas.height;
        if (window.trayRegion) {
            region_x = window.trayRegion.region_x;
            region_y = window.trayRegion.region_y;
            region_w = window.trayRegion.region_w;
            region_h = window.trayRegion.region_h;
            trayLength = window.trayRegion.tray_length;
            trayWidth = window.trayRegion.tray_width;
        }

        const fontSize = parseInt(document.getElementById("fontSize").value);
        const minSize = parseFloat(document.getElementById("minSize").value);
        const circleThreshold = parseFloat(document.getElementById("circleThreshold").value);


        let totalDiamonds = 0;


        // L·∫•y scale gi·ªØa canvas hi·ªÉn th·ªã (CSS) v√† canvas n·ªôi b·ªô (width 640)
        const scale = canvas.clientWidth / canvas.width;

        let promises = [];
        for (let y = 0; y <= canvas.height - partSize; y += stride) {
            for (let x = 0; x <= canvas.width - partSize; x += stride) {

                // Hi·ªÉn th·ªã box tr√™n giao di·ªán theo t·ª∑ l·ªá CSS
                box.style.left = (x * scale) + "px";
                box.style.top = (y * scale) + "px";
                box.style.width = (partSize * scale) + "px";
                box.style.height = (partSize * scale) + "px";

                await new Promise(resolve => setTimeout(resolve, 100)); // C·∫≠p nh·∫≠t giao di·ªán

                // C·∫Øt to√†n ·∫£nh (v√¨ YOLO s·∫Ω x·ª≠ l√Ω qua t·ªça ƒë·ªô v√πng)
                const promise = (async () => {
                    const canvasBlob = await new Promise(resolve =>
                        canvas.toBlob(resolve, "image/png")
                    );
                    const formData = new FormData();
                    formData.append("image", canvasBlob, `part_${x}_${y}.png`);
                    formData.append("tray_length", trayLength);
                    formData.append("tray_width", trayWidth);
                    formData.append("min_size", minSize);
                    formData.append("font_size", fontSize);
                    formData.append("region_x", x);
                    formData.append("region_y", y);
                    formData.append("region_w", partSize);
                    formData.append("region_h", partSize);
                    formData.append("circle_threshold", circleThreshold);



                    try {
                        const res = await fetch("/predict?mode=box", {
                            method: "POST",
                            body: formData,
                        });

                    } catch (error) {
                        console.error(`L·ªói khi x·ª≠ l√Ω v√πng (${x}, ${y})`, error);
                        return null;
                    }
                })();
                promises.push(promise);
            }
        }
        await Promise.all(promises);
        const formData = new FormData();
        formData.append("region_x", region_x);
        formData.append("region_y", region_y);
        formData.append("region_w", region_w);
        formData.append("region_h", region_h);
        formData.append("tray_width", trayWidth);
        formData.append("tray_length", trayLength);
        formData.append("min_size", minSize);
        formData.append("circle_threshold", circleThreshold);


        // L·∫•y file ·∫£nh g·ªëc t·ª´ input
        const fileInput = document.getElementById("fileInput");
        const originalFile = fileInput.files[0];
        if (originalFile) {
            formData.append("original_image", originalFile, originalFile.name);
        }

        // G·ª≠i ·∫£nh ƒë√£ x·ª≠ l√Ω l√™n server ƒë·ªÉ l·∫•y k·∫øt qu·∫£ cu·ªëi c√πng
        const res = await fetch("/final_result", {
            method: "POST",
            body: formData
        });
        const data = await res.json();
        if (data.annotated_image) {
            const img = new Image();
            img.onload = () => originalAnnotatedImageOnload(img);
            img.src = "data:image/jpeg;base64," + data.annotated_image;
        }
        
        document.getElementById("totalCountDisplay").innerText = `T·ªïng s·ªë: ${data.total_diamonds}üíé`;

        // Hi·ªÉn th·ªã b·∫£ng chi ti·∫øt
        const tbody = document.getElementById("resultsTableBody");
        tbody.innerHTML = "";
        if (Array.isArray(data.details)) {
            data.details.forEach((item) => {
                const tr = document.createElement("tr");
                tr.innerHTML = `
      <td style="padding-left: 20px;">${item.index}</td>
      <td style="padding-left: 20px;">${item.width?.toFixed(2) ?? ""}</td>
      <td style="padding-left: 20px;">${item.height?.toFixed(2) ?? ""}</td>
      <td style="padding-left: 20px;">${item.shape ?? ""}</td>
      <td style="padding-left: 20px;">${item.area?.toFixed(2) ?? ""}</td>
      <td style="padding-left: 20px;">${item.diameter?.toFixed(2) ?? ""}</td>
    `;
                tbody.appendChild(tr);
            });
        }
    } finally {
        setUIEnabled(true);
    }
}


  document.getElementById("saveExcelBtn").addEventListener("click", function () {
    // L·∫•y b·∫£ng
    var table = document.querySelector("table");

    // Chuy·ªÉn b·∫£ng HTML th√†nh sheet
    var wb = XLSX.utils.table_to_book(table, { sheet: "K·∫øt qu·∫£" });

    // T·∫°o t√™n file k√®m ng√†y gi·ªù
    var now = new Date();
    var fileName = "ket_qua_" 
      + now.getFullYear() + "-"
      + String(now.getMonth() + 1).padStart(2, '0') + "-"
      + String(now.getDate()).padStart(2, '0') + "_"
      + String(now.getHours()).padStart(2, '0') + "-"
      + String(now.getMinutes()).padStart(2, '0') + "-"
      + String(now.getSeconds()).padStart(2, '0')
      + ".xlsx";

    // Xu·∫•t file
    XLSX.writeFile(wb, fileName);
  });




// X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "T·ª± ƒë·ªông c·∫Øt khay"
document.getElementById('autoCutBtn').addEventListener('click', function () {
    document.getElementById('cutOptionsGroup').classList.add('show');
    document.getElementById('confirmTrayBtn').style.display = '';
});


// X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng x√°c nh·∫≠n v√πng khay
document.getElementById("confirmTrayBtn").addEventListener("click", function () {
    document.getElementById('cutOptionsGroup').classList.remove('show');
    const scaleFactor = TARGET_SIZE / 320;
    const region_x = Math.round(box.offsetLeft * scaleFactor);
    const region_y = Math.round(box.offsetTop * scaleFactor);
    const region_w = Math.round(box.offsetWidth * scaleFactor);
    const region_h = Math.round(box.offsetHeight * scaleFactor);

    const tray_width = parseFloat(document.getElementById("trayWidth").value);
    const tray_length = parseFloat(document.getElementById("trayLength").value);
    const minSize = parseFloat(document.getElementById("minSize").value);

    // L∆∞u v√†o bi·∫øn to√†n c·ª•c ƒë·ªÉ autoCountDiamonds d√πng
    window.trayRegion = { region_x, region_y, region_w, region_h, tray_width, tray_length, minSize };

    // G·ªçi autoCountDiamonds
    box.style.border = "2px solid red"; // H·ªìng
    document.getElementById("confirmTrayBtn").style.display = "none";
    autoCountDiamonds();
});

// H√†m n√†y s·∫Ω b·∫≠t/t·∫Øt c√°c n√∫t v√† l√†m m·ªù ·∫£nh preview
function setUIEnabled(enabled) {
    // Danh s√°ch id c√°c n√∫t c·∫ßn disable/enable
    const ids = [
        "fileInput", "enhanceBtn", "autoCutBtn", "openCameraBtn", "takePhotoBtn",
        "calculateBtn", "btnWithBox", "btnNumberOnly", "partSizeSelect"
    ];
    ids.forEach(id => {
        const el = document.getElementById(id);
        if (el) el.disabled = !enabled;
    });
    // L√†m m·ªù ·∫£nh review
    const preview = document.getElementById("canvasUpload");
    if (preview) {
        if (!enabled) preview.classList.add("disabled-overlay");
        else preview.classList.remove("disabled-overlay");
    }
}

//X·ª¨ L√ù N√ÇNG C·∫§P ·∫¢NH
// Khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "N√¢ng c·∫•p ·∫£nh", s·∫Ω l√†m s·∫Øc n√©t ·∫£nh
// H√†m n√†y s·∫Ω l√†m s·∫Øc n√©t ·∫£nh b·∫±ng b·ªô l·ªçc
// S·ª≠ d·ª•ng b·ªô l·ªçc s·∫Øc n√©t ƒë∆°n gi·∫£n
function enhanceImage() {
    const canvas = document.getElementById("canvasUpload");
    const ctx = canvas.getContext("2d");
    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    const data = imageData.data;

    const kernel = [
        0, -1, 0,
        -1, 5, -1,
        0, -1, 0
    ];

    const copy = new Uint8ClampedArray(data); // B·∫£n sao d·ªØ li·ªáu g·ªëc
    const w = canvas.width, h = canvas.height;

    for (let y = 1; y < h - 1; y++) {
        for (let x = 1; x < w - 1; x++) {
            for (let c = 0; c < 3; c++) {
                let i = (y * w + x) * 4 + c;
                let val = 0;

                for (let ky = -1; ky <= 1; ky++) {
                    for (let kx = -1; kx <= 1; kx++) {
                        const weight = kernel[(ky + 1) * 3 + (kx + 1)];
                        const ni = ((y + ky) * w + (x + kx)) * 4 + c;
                        val += copy[ni] * weight;
                    }
                }

                data[i] = Math.min(255, Math.max(0, val));
            }
        }
    }

    ctx.putImageData(imageData, 0, 0);

}


// X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "N√¢ng c·∫•p ·∫£nh"
document.getElementById("enhanceBtn").addEventListener("click", enhanceImage);

// Hi·ªÉn th·ªã gi√° tr·ªã font size v√† min size khi ng∆∞·ªùi d√πng thay ƒë·ªïi
document.getElementById("fontSize").addEventListener("input", function () {
    document.getElementById("fontSizeValue").innerText = this.value;
});

// Hi·ªÉn th·ªã gi√° tr·ªã min size khi ng∆∞·ªùi d√πng thay ƒë·ªïi
document.getElementById("minSize").addEventListener("input", function () {
    document.getElementById("minSizeValue").innerText = this.value;
});

// H√†m n√†y s·∫Ω resize v√† pad ·∫£nh v·ªÅ k√≠ch th∆∞·ªõc 640x640
// N√≥ s·∫Ω gi·ªØ nguy√™n t·ª∑ l·ªá ·∫£nh g·ªëc v√† th√™m vi·ªÅn ƒëen n·∫øu c·∫ßn
const TARGET_SIZE = 640;
function resizeAndPadImage(file, targetSize) {
    return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onload = function (e) {
            const img = new Image();
            img.onload = function () {
                const ratio = Math.min(targetSize / img.width, targetSize / img.height);
                const newWidth = Math.round(img.width * ratio);
                const newHeight = Math.round(img.height * ratio);

                const canvas = document.getElementById("canvasUpload");
                canvas.width = targetSize;
                canvas.height = targetSize;
                canvas.style.width = "320px";
                const ctx = canvas.getContext("2d");

                ctx.fillStyle = "black";
                ctx.fillRect(0, 0, targetSize, targetSize);

                const xOffset = Math.floor((targetSize - newWidth) / 2);
                const yOffset = Math.floor((targetSize - newHeight) / 2);
                ctx.drawImage(img, xOffset, yOffset, newWidth, newHeight);

                canvas.toBlob((blob) => {
                    resolve(blob);
                }, file.type);
            };
            img.src = e.target.result;
        };
        reader.readAsDataURL(file);
    });
}


// H√†m n√†y s·∫Ω g·ª≠i ·∫£nh ƒë√£ ch·ªçn l√™n server ƒë·ªÉ x·ª≠ l√Ω
// N√≥ s·∫Ω g·ª≠i ·∫£nh ƒë√£ resize v√† pad, c√πng v·ªõi c√°c th√¥ng tin kh√°c nh∆∞ v√πng ch·ªçn
async function sendImageToServer(mode) {
    const fileInput = document.getElementById("fileInput");
    const file = fileInput.files[0];
    if (!file) {
        alert("Vui l√≤ng ch·ªçn ·∫£nh tr∆∞·ªõc.");
        return;
    }

    const canvas = document.getElementById("canvasUpload");
    const processedBlob = await new Promise(resolve =>
        canvas.toBlob(blob => resolve(blob), file.type)
    );
    const formData = new FormData();

    const scaleFactor = TARGET_SIZE / 320;
    const boxX = Math.round(box.offsetLeft * scaleFactor);
    const boxY = Math.round(box.offsetTop * scaleFactor);
    const boxW = Math.round(box.offsetWidth * scaleFactor);
    const boxH = Math.round(box.offsetHeight * scaleFactor);

    // G·ª≠i th√™m th√¥ng tin v√πng ch·ªçn
    formData.append("region_x", boxX);
    formData.append("region_y", boxY);
    formData.append("region_w", boxW);
    formData.append("region_h", boxH);


    const fontSize = parseInt(document.getElementById("fontSize").value);
    formData.append("font_size", fontSize);


    const minSize = parseFloat(document.getElementById("minSize").value);
    formData.append("min_size", minSize);

    const circleThreshold = parseFloat(document.getElementById("circleThreshold").value);
    formData.append("circle_threshold", circleThreshold);



    formData.append("image", processedBlob, file.name);
    const trayLength = document.getElementById("trayLength").value;
    const trayWidth = document.getElementById("trayWidth").value;

    formData.append("tray_length", trayLength);
    formData.append("tray_width", trayWidth);
    try {
        const res = await fetch(`/predict?mode=${mode}`, {
            method: "POST",
            body: formData,
        });

        const data = await res.json();
        document.getElementById("totalCountDisplay").innerText = "T·ªïng s·ªë: " + data.diamond_count + "üíé";
        console.log("chieudai_khay + chieurong_khay hihi:", data.chieudai_khay, data.chieurong_khay);
        if (data.annotated_image) {
            const img = new Image();
            img.onload = () => originalAnnotatedImageOnload(img);
            img.src = "data:image/jpeg;base64," + data.annotated_image;
        }

        const tbody = document.getElementById("resultsTableBody");
        tbody.innerHTML = "";
        if (Array.isArray(data.details)) {
            data.details.forEach((item) => {
                const tr = document.createElement("tr");
                tr.innerHTML = `
    <td style="padding-left: 20px;">${item.index}</td>
    <td style="padding-left: 20px;">${item.width.toFixed(2)}</td>
    <td style="padding-left: 20px;">${item.height.toFixed(2)}</td>
    <td style="padding-left: 20px;">${item.shape}</td>
    <td style="padding-left: 20px;">${item.area.toFixed(2)}</td>
    <td style="padding-left: 20px;">${item.diameter.toFixed(2)}</td>
  `;
                tbody.appendChild(tr);
            });
        }
    } catch (error) {
        alert("L·ªói khi g·ª≠i ·∫£nh l√™n server.");
        console.error(error);
    }
}


// X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng ch·ªçn ·∫£nh t·ª´ m√°y t√≠nh
// Khi ng∆∞·ªùi d√πng ch·ªçn ·∫£nh, s·∫Ω resize v√† pad ·∫£nh v·ªÅ k√≠ch th∆∞·ªõc 640x640
document.getElementById("fileInput").addEventListener("change", async function () {
    const file = this.files[0];
    if (file) {
        await resizeAndPadImage(file, TARGET_SIZE);
        showResizableBox();
    }
});


// X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "T·ª± ƒë·ªông ƒë·∫øm kim c∆∞∆°ng"
document.getElementById("btnWithBox").addEventListener("click", () => sendImageToServer("box"));


// Hi·ªÉn th·ªã khung resizable
// Khung n√†y s·∫Ω cho ph√©p ng∆∞·ªùi d√πng k√©o th·∫£ ƒë·ªÉ ch·ªçn v√πng c·∫ßn ƒë·∫øm kim
let box = document.getElementById("resizableBox");

// Thi·∫øt l·∫≠p canvas ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh ƒë√£ ch·ªçn
// Canvas n√†y s·∫Ω hi·ªÉn th·ªã ·∫£nh ƒë√£ resize v√† pad, c√πng v·ªõi v√πng ch·ªçn
let canvas = document.getElementById("canvasUpload");


// Hi·ªÉn th·ªã khung resizable khi ng∆∞·ªùi d√πng ch·ªçn ·∫£nh
// H√†m n√†y s·∫Ω hi·ªÉn th·ªã khung resizable v√† ƒë·∫∑t v·ªã tr√≠, k√≠ch th∆∞·ªõc ban ƒë·∫ßu
// Khung n√†y s·∫Ω cho ph√©p ng∆∞·ªùi d√πng k√©o th·∫£ ƒë·ªÉ ch·ªçn v√πng c·∫ßn ƒë·∫øm kim c∆∞∆°ng
function showResizableBox() {
    box.style.display = "block";
    box.style.left = "20px";
    box.style.top = "20px";
    box.style.width = "100px";
    box.style.height = "100px";
}

let isDragging = false;
let offsetX = 0, offsetY = 0;

// K√©o di chuy·ªÉn khung b·∫±ng c·∫£m ·ª©ng
box.addEventListener("touchstart", function (e) {
    if (e.target.classList.contains("resizer")) return;
    isDragging = true;
    const touch = e.touches[0];
    const rect = box.getBoundingClientRect();
    offsetX = touch.clientX - rect.left;
    offsetY = touch.clientY - rect.top;
    e.preventDefault();
}, { passive: false });

document.addEventListener("touchmove", function (e) {
    if (!isDragging) return;
    const touch = e.touches[0];
    let previewRect = canvas.getBoundingClientRect();
    let x = touch.clientX - previewRect.left - offsetX;
    let y = touch.clientY - previewRect.top - offsetY;

    x = Math.max(0, Math.min(x, 320 - box.offsetWidth));
    y = Math.max(0, Math.min(y, 320 - box.offsetHeight));

    box.style.left = `${x}px`;
    box.style.top = `${y}px`;
    e.preventDefault();
}, { passive: false });

document.addEventListener("touchend", () => isDragging = false);

// Resize 4 g√≥c b·∫±ng c·∫£m ·ª©ng
const resizers = box.querySelectorAll(".resizer");
let isResizing = false;
let currentResizer;

resizers.forEach(resizer => {
    resizer.addEventListener("touchstart", function (e) {
        isResizing = true;
        currentResizer = resizer;
        e.preventDefault();
        e.stopPropagation();
    }, { passive: false });
});

document.addEventListener("touchmove", function (e) {
    if (!isResizing) return;
    const touch = e.touches[0];
    const canvasRect = canvas.getBoundingClientRect();
    const boxRect = box.getBoundingClientRect();

    const dx = touch.clientX - boxRect.left;
    const dy = touch.clientY - boxRect.top;

    let width = box.offsetWidth;
    let height = box.offsetHeight;
    let left = box.offsetLeft;
    let top = box.offsetTop;

    if (currentResizer.classList.contains("bottom-right")) {
        width = dx;
        height = dy;
    } else if (currentResizer.classList.contains("bottom-left")) {
        width = box.offsetWidth - (touch.clientX - boxRect.left);
        left += (touch.clientX - boxRect.left);
        height = dy;
    } else if (currentResizer.classList.contains("top-right")) {
        height = box.offsetHeight - (touch.clientY - boxRect.top);
        top += (touch.clientY - boxRect.top);
        width = dx;
    } else if (currentResizer.classList.contains("top-left")) {
        width = box.offsetWidth - (touch.clientX - boxRect.left);
        height = box.offsetHeight - (touch.clientY - boxRect.top);
        left += (touch.clientX - boxRect.left);
        top += (touch.clientY - boxRect.top);
    }

    // Gi·ªõi h·∫°n ƒë·ªÉ khung kh√¥ng tr√†n ra ngo√†i
    left = Math.max(0, Math.min(left, 320 - 20));
    top = Math.max(0, Math.min(top, 320 - 20));
    width = Math.max(20, Math.min(width, 320 - left));
    height = Math.max(20, Math.min(height, 320 - top));

    box.style.width = `${width}px`;
    box.style.height = `${height}px`;
    box.style.left = `${left}px`;
    box.style.top = `${top}px`;
    e.preventDefault();
}, { passive: false });

document.addEventListener("touchend", () => isResizing = false);

// Resize b·∫±ng chu·ªôt
resizers.forEach(resizer => {
    resizer.addEventListener("mousedown", function (e) {
        isResizing = true;
        currentResizer = resizer;
        e.preventDefault();
        e.stopPropagation();
    });
});

document.addEventListener("mousemove", function (e) {
    if (!isResizing) return;
    const canvasRect = canvas.getBoundingClientRect();
    const boxRect = box.getBoundingClientRect();

    const dx = e.clientX - boxRect.left;
    const dy = e.clientY - boxRect.top;

    let width = box.offsetWidth;
    let height = box.offsetHeight;
    let left = box.offsetLeft;
    let top = box.offsetTop;

    if (currentResizer.classList.contains("bottom-right")) {
        width = dx;
        height = dy;
    } else if (currentResizer.classList.contains("bottom-left")) {
        width = box.offsetWidth - (e.clientX - boxRect.left);
        left += (e.clientX - boxRect.left);
        height = dy;
    } else if (currentResizer.classList.contains("top-right")) {
        height = box.offsetHeight - (e.clientY - boxRect.top);
        top += (e.clientY - boxRect.top);
        width = dx;
    } else if (currentResizer.classList.contains("top-left")) {
        width = box.offsetWidth - (e.clientX - boxRect.left);
        height = box.offsetHeight - (e.clientY - boxRect.top);
        left += (e.clientX - boxRect.left);
        top += (e.clientY - boxRect.top);
    }

    // Gi·ªõi h·∫°n ƒë·ªÉ khung kh√¥ng tr√†n ra ngo√†i
    left = Math.max(0, Math.min(left, 320 - 20));
    top = Math.max(0, Math.min(top, 320 - 20));
    width = Math.max(20, Math.min(width, 320 - left));
    height = Math.max(20, Math.min(height, 320 - top));

    box.style.width = `${width}px`;
    box.style.height = `${height}px`;
    box.style.left = `${left}px`;
    box.style.top = `${top}px`;
});

document.addEventListener("mouseup", () => isResizing = false);

// X·ª¨ L√ù M·ªû CAMERA V√Ä CH·ª§P ·∫¢NH
// Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ stream video v√† tr·∫°ng th√°i camera
let videoStream = null;
let currentFacingMode = "environment";

const video = document.getElementById("video");
const cameraSelect = document.getElementById("cameraSelect");
const openCameraBtn = document.getElementById("openCameraBtn");
const takePhotoBtn = document.getElementById("takePhotoBtn");
const capturedPhoto = document.getElementById("capturedPhoto");
const videoContainer = document.querySelector(".video-container");
const uploadTabBtn = document.querySelector('[data-tab="uploadTab"]');
const captureTabBtn = document.querySelector('[data-tab="captureTab"]');
const uploadTab = document.getElementById("uploadTab");
const captureTab = document.getElementById("captureTab");

// Tab switching logic
document.querySelectorAll('.tab-btn').forEach(btn => {
    btn.addEventListener('click', function () {
        document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
        this.classList.add('active');
        if (this.dataset.tab === 'uploadTab') {
            uploadTab.classList.add('active');
            captureTab.classList.remove('active');
        } else if (this.dataset.tab === 'captureTab') {
            uploadTab.classList.remove('active');
            captureTab.classList.add('active');
            // N·∫øu l√† thi·∫øt b·ªã di ƒë·ªông th√¨ t·ª± ƒë·ªông m·ªü input file v·ªõi capture
            if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                const mobileCaptureInput = document.getElementById('mobileCaptureInput');
                if (mobileCaptureInput) {
                    mobileCaptureInput.value = '';
                    mobileCaptureInput.click();
                }
            }
        }
    });
});

// M·ªü camera
openCameraBtn.addEventListener("click", async function () {
    if (videoStream) {
        videoStream.getTracks().forEach(track => track.stop());
    }
    currentFacingMode = cameraSelect.value;

    try {
        // Th·ª≠ v·ªõi exact facing mode tr∆∞·ªõc
        videoStream = await navigator.mediaDevices.getUserMedia({
            video: {
                facingMode: { exact: currentFacingMode },
                width: { ideal: 1280 },
                height: { ideal: 720 }
            },
            audio: false
        });
    } catch (e) {
        console.log("Kh√¥ng th·ªÉ m·ªü camera v·ªõi exact mode, th·ª≠ mode th∆∞·ªùng:", e);
        try {
            // Th·ª≠ v·ªõi facing mode th∆∞·ªùng
            videoStream = await navigator.mediaDevices.getUserMedia({
                video: {
                    facingMode: currentFacingMode,
                    width: { ideal: 1280 },
                    height: { ideal: 720 }
                },
                audio: false
            });
        } catch (e2) {
            console.log("Kh√¥ng th·ªÉ m·ªü camera, th·ª≠ camera b·∫•t k·ª≥:", e2);
            // Th·ª≠ v·ªõi camera b·∫•t k·ª≥
            videoStream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: false
            });
        }
    }

    if (videoStream) {
        video.srcObject = videoStream;
        videoContainer.style.display = "block";
        takePhotoBtn.style.display = "inline-block";
        capturedPhoto.style.display = "none";

        // ƒê·∫£m b·∫£o video load xong
        video.onloadedmetadata = function () {
            console.log("Camera ƒë√£ s·∫µn s√†ng");
        };
    } else {
        alert("Kh√¥ng th·ªÉ m·ªü camera. Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p camera.");
    }
});

// CH·ª§P ·∫¢NH T·ª™ CAMERA
// Khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "Ch·ª•p ·∫£nh", s·∫Ω ch·ª•p ·∫£nh
takePhotoBtn.addEventListener("click", function () {
    const tempCanvas = document.createElement("canvas");
    tempCanvas.width = video.videoWidth;
    tempCanvas.height = video.videoHeight;
    const ctx = tempCanvas.getContext("2d");
    ctx.drawImage(video, 0, 0, tempCanvas.width, tempCanvas.height);
    const dataUrl = tempCanvas.toDataURL("image/png");
    capturedPhoto.src = dataUrl;
    capturedPhoto.style.display = "block";
    // Chuy·ªÉn ·∫£nh sang tab upload v√† v·∫Ω l√™n canvasUpload
    uploadTabBtn.click();
    // Resize v√† pad ·∫£nh nh∆∞ upload
    const img = new Image();
    img.onload = async function () {
        const ratio = Math.min(TARGET_SIZE / img.width, TARGET_SIZE / img.height);
        const newWidth = Math.round(img.width * ratio);
        const newHeight = Math.round(img.height * ratio);
        const canvasUpload = document.getElementById("canvasUpload");
        canvasUpload.width = TARGET_SIZE;
        canvasUpload.height = TARGET_SIZE;
        canvasUpload.style.width = "320px";
        const ctx2 = canvasUpload.getContext("2d");
        ctx2.fillStyle = "black";
        ctx2.fillRect(0, 0, TARGET_SIZE, TARGET_SIZE);
        const xOffset = Math.floor((TARGET_SIZE - newWidth) / 2);
        const yOffset = Math.floor((TARGET_SIZE - newHeight) / 2);
        ctx2.drawImage(img, xOffset, yOffset, newWidth, newHeight);
        showResizableBox();
        // T·∫°o file t·ª´ ·∫£nh v·ª´a ch·ª•p v√† g√°n v√†o fileInput
        const fileInput = document.getElementById('fileInput');
        if (fileInput) {
            const res = await fetch(dataUrl);
            const blob = await res.blob();
            const file = new File([blob], 'captured_photo.png', { type: 'image/png' });
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            fileInput.files = dataTransfer.files;
        }
    };
    img.src = dataUrl;
});

// Khi ng∆∞·ªùi d√πng ch·ªçn camera, s·∫Ω thay ƒë·ªïi facing mode
captureTabBtn.addEventListener('click', function () {
    // Kh√¥ng t·ª± ƒë·ªông hi·ªÉn th·ªã video container khi chuy·ªÉn tab
    // Ch·ªâ hi·ªÉn th·ªã khi ng∆∞·ªùi d√πng nh·∫•n "M·ªü Camera"
    videoContainer.style.display = "none";
    takePhotoBtn.style.display = "none";
});

// Khi ng∆∞·ªùi d√πng chuy·ªÉn sang tab upload, s·∫Ω ·∫©n video v√† n√∫t ch·ª•p ·∫£nh
uploadTabBtn.addEventListener('click', function () {
    videoContainer.style.display = "none";
    takePhotoBtn.style.display = "none";
    // D·ª´ng camera n·∫øu ƒëang ch·∫°y
    if (videoStream) {
        videoStream.getTracks().forEach(track => track.stop());
        videoStream = null;
    }
});

// Hi·ªÉn th·ªã danh s√°ch camera
function showResultLoadingOverlay() {
    document.getElementById('resultLoadingOverlay').style.display = 'flex';
}
function hideResultLoadingOverlay() {
    document.getElementById('resultLoadingOverlay').style.display = 'none';
}
// Hook v√†o autoCountDiamonds v√† sendImageToServer
const _autoCountDiamonds = autoCountDiamonds;
autoCountDiamonds = async function (...args) {
    showResultLoadingOverlay();
    try {
        await _autoCountDiamonds.apply(this, args);
    } finally {
        hideResultLoadingOverlay();
    }
}

// Hook v√†o sendImageToServer ƒë·ªÉ hi·ªÉn th·ªã overlay loading
// H√†m n√†y s·∫Ω hi·ªÉn th·ªã overlay loading khi g·ª≠i ·∫£nh l√™n server
const _sendImageToServer = sendImageToServer;
sendImageToServer = async function (...args) {
    showResultLoadingOverlay();
    try {
        await _sendImageToServer.apply(this, args);
    } finally {
        hideResultLoadingOverlay();
    }
}

// NgƒÉn ch·∫∑n s·ª± ki·ªán beforeunload ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu
// ƒêi·ªÅu n√†y s·∫Ω hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n khi ng∆∞·ªùi d√πng c·ªë g·∫Øng ƒë√≥ng
window.addEventListener("beforeunload", function (e) {
    e.preventDefault();
});

// ‚úÖ G√°n bi·∫øn to√†n c·ª•c ƒë·ªÉ tr√°nh l·ªói ReferenceError
let shapeChart = null;


// X·ª≠ l√Ω s·ª± ki·ªán m·ªü modal th·ªëng k√™
// Khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "M·ªü Dashboard", s·∫Ω hi·ªÉn th·ªã modal th·ªëng
document.addEventListener("DOMContentLoaded", () => {
    const modal = document.getElementById("statsModal");
    const closeBtn = modal.querySelector(".close");
    const openBtn = document.getElementById("openDashboardBtn");

    openBtn.addEventListener("click", () => {
        const rows = document.querySelectorAll("#resultsTableBody tr");
        let total = 0, circle = 0, triangle = 0;

        rows.forEach(row => {
            const cells = row.querySelectorAll("td");
            if (cells.length >= 4) {
                total++;
                const shape = cells[3].innerText.trim();
                if (shape === "Tr√≤n") circle++;
                else if (shape === "Tam gi√°c") triangle++;
            }
        });

        document.getElementById("statTotal").innerText = total;
        document.getElementById("statCircle").innerText = circle;
        document.getElementById("statTriangle").innerText = triangle;

        if (shapeChart) shapeChart.destroy();

        const ctx = document.getElementById("shapeChart").getContext("2d");
        shapeChart = new Chart(ctx, {
            type: "doughnut",
            data: {
                labels: ["H√¨nh Tr√≤n", "Tam Gi√°c"],
                datasets: [{
                    data: [circle, triangle],
                    backgroundColor: ["#007bff", "#dc3545"]
                }]
            }
        });

        modal.style.display = "block";
    });

    closeBtn.onclick = () => modal.style.display = "none";
    window.onclick = (e) => {
        if (e.target === modal) modal.style.display = "none";
    };
});

function updateMinSizeSliderBg() {
    const slider = document.getElementById('minSize');
    const min = parseFloat(slider.min);
    const max = parseFloat(slider.max);
    const val = parseFloat(slider.value);
    const percent = ((val - min) / (max - min)) * 100;
    slider.style.background = `linear-gradient(to right, #E6266F 0%, #E6266F ${percent}%, #eee ${percent}%, #eee 100%)`;
}
document.getElementById('minSize').addEventListener('input', updateMinSizeSliderBg);
window.addEventListener('DOMContentLoaded', updateMinSizeSliderBg);

function updateSliderBg(sliderId) {
    const slider = document.getElementById(sliderId);
    if (!slider) return;
    const min = parseFloat(slider.min);
    const max = parseFloat(slider.max);
    const val = parseFloat(slider.value);
    const percent = ((val - min) / (max - min)) * 100;
    slider.style.background = `linear-gradient(to right, #E6266F 0%, #E6266F ${percent}%, #eee ${percent}%, #eee 100%)`;
}

// G·ªçi cho c·∫£ hai slider khi load v√† khi thay ƒë·ªïi
['minSize', 'fontSize'].forEach(id => {
    const slider = document.getElementById(id);
    if (slider) {
        slider.addEventListener('input', () => updateSliderBg(id));
        // G·ªçi 1 l·∫ßn khi load trang
        updateSliderBg(id);
    }
});

window.addEventListener('DOMContentLoaded', function () {
    var cutGroup = document.getElementById('cutOptionsGroup');
    if (cutGroup) {
        cutGroup.classList.remove('show');
        cutGroup.style.display = 'none';
    }
});

// C·∫≠p nh·∫≠t gi√° tr·ªã hi·ªÉn th·ªã cho slider circleThreshold
const circleThresholdSlider = document.getElementById('circleThreshold');
const circleThresholdValue = document.getElementById('circleThresholdValue');
if (circleThresholdSlider && circleThresholdValue) {
    circleThresholdSlider.addEventListener('input', function () {
        circleThresholdValue.textContent = this.value;
    });
}

const circleSlider = document.getElementById('circleThreshold');
if (circleSlider) {
    updateSliderBg('circleThreshold');
    circleSlider.addEventListener('input', function () {
        updateSliderBg('circleThreshold');
    });
}

// Khi nh·∫•n tab "T·∫£i l√™n h√¨nh ·∫£nh" tr√™n mobile, t·ª± ƒë·ªông click input file
let userClickedUploadTab = false;

// ƒê√°nh d·∫•u khi ng∆∞·ªùi d√πng th·ª±c s·ª± b·∫•m v√†o tab upload
const uploadTabBtnEl = document.querySelector('[data-tab="uploadTab"]');
uploadTabBtnEl.addEventListener('mousedown', function () {
    userClickedUploadTab = true;
});
uploadTabBtnEl.addEventListener('touchstart', function () {
    userClickedUploadTab = true;
});

uploadTabBtnEl.addEventListener('click', function () {
    if (window.innerWidth <= 600) {
        if (userClickedUploadTab) {
            document.getElementById('fileInput').click();
        }
    }
    userClickedUploadTab = false;
});

// Hi·ªÉn th·ªã modal l∆∞u √Ω khi nh·∫•n ch·∫•m h·ªèi
const helpIcon = document.getElementById('helpIcon');
const helpModal = document.getElementById('helpModal');
const closeHelpModal = document.getElementById('closeHelpModal');
if (helpIcon && helpModal && closeHelpModal) {
    helpIcon.addEventListener('click', function () {
        helpModal.style.display = 'block';
    });
    closeHelpModal.addEventListener('click', function () {
        helpModal.style.display = 'none';
    });
    window.addEventListener('click', function (e) {
        if (e.target === helpModal) helpModal.style.display = 'none';
    });
}

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn/ch·ª•p ·∫£nh t·ª´ input file mobileCaptureInput
const mobileCaptureInput = document.getElementById('mobileCaptureInput');
if (mobileCaptureInput) {
    mobileCaptureInput.addEventListener('change', async function () {
        const file = this.files[0];
        if (file) {
            await resizeAndPadImage(file, TARGET_SIZE);
            showResizableBox();
            // G√°n file v·ª´a ch·ª•p v√†o fileInput ƒë·ªÉ n√∫t T√≠nh To√°n ho·∫°t ƒë·ªông
            const fileInput = document.getElementById('fileInput');
            if (fileInput) {
                // T·∫°o FileList m·ªõi t·ª´ file v·ª´a ch·ª•p
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                fileInput.files = dataTransfer.files;
            }
            // T·ª± ƒë·ªông chuy·ªÉn v·ªÅ tab upload
            if (uploadTabBtn) uploadTabBtn.click();
        }
    });
}


// X·ª¨ L√ù PH√ìNG TO/THU NH·ªé V√Ä DI CHUY·ªÇN ·∫¢NH K·∫æT QU·∫¢
const zoomContainer = document.getElementById('zoomContainer');
const canvasAnnotated = document.getElementById('canvasAnnotated');
const ctxAnnotated = canvasAnnotated.getContext('2d');

let scale = 1;
let translateX = 0;
let translateY = 0;
let isPanning = false;
let startX = 0;
let startY = 0;

// Ghi ƒë√® h√†m onload c·ªßa ·∫£nh ƒë·ªÉ v·∫Ω l·∫°i v·ªõi c√°c thu·ªôc t√≠nh transform
const originalAnnotatedImageOnload = (img) => {
    canvasAnnotated.width = img.width;
    canvasAnnotated.height = img.height;
    // ƒê·∫£m b·∫£o canvas lu√¥n v·ª´a v·ªõi khung hi·ªÉn th·ªã ban ƒë·∫ßu
    canvasAnnotated.style.width = "100%";
    canvasAnnotated.style.height = "100%";

    // ƒê·∫∑t l·∫°i c√°c gi√° tr·ªã zoom/pan khi ·∫£nh m·ªõi ƒë∆∞·ª£c t·∫£i
    scale = 1;
    translateX = 0;
    translateY = 0;
    updateTransform();

    ctxAnnotated.drawImage(img, 0, 0);
};

// C·∫≠p nh·∫≠t l·∫°i logic t·∫£i ·∫£nh trong h√†m autoCountDiamonds v√† sendImageToServer
// ƒë·ªÉ s·ª≠ d·ª•ng h√†m onload ƒë√£ ghi ƒë√®
// T√¨m v√† thay th·∫ø img.onload trong autoCountDiamonds
// T√¨m v√† thay th·∫ø img.onload trong sendImageToServer

function updateTransform() {
    canvasAnnotated.style.transformOrigin = `0 0`; // Set transform origin to top-left
    canvasAnnotated.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scale})`;
}

zoomContainer.addEventListener('wheel', (e) => {
    e.preventDefault();
    const scaleAmount = 0.1;
    const mouseX = e.clientX - zoomContainer.getBoundingClientRect().left;
    const mouseY = e.clientY - zoomContainer.getBoundingClientRect().top;

    const oldScale = scale;
    if (e.deltaY < 0) {
        scale += scaleAmount; // Zoom in
    } else {
        scale -= scaleAmount; // Zoom out
    }
    scale = Math.max(0.5, Math.min(scale, 5)); // Limit zoom level

    // Adjust translation to zoom towards the mouse pointer
    translateX = mouseX - (mouseX - translateX) * (scale / oldScale);
    translateY = mouseY - (mouseY - translateY) * (scale / oldScale);

    updateTransform();
});

zoomContainer.addEventListener('mousedown', (e) => {
    if (scale > 1) { // Only allow panning if zoomed in
        isPanning = true;
        zoomContainer.style.cursor = 'grabbing';
        startX = e.clientX - translateX;
        startY = e.clientY - translateY;
    }
});

zoomContainer.addEventListener('mousemove', (e) => {
    if (!isPanning) return;
    translateX = e.clientX - startX;
    translateY = e.clientY - startY;

    // Constrain panning to keep the image within the container
    const scaledWidth = canvasAnnotated.width * scale;
    const scaledHeight = canvasAnnotated.height * scale;
    const containerWidth = zoomContainer.clientWidth;
    const containerHeight = zoomContainer.clientHeight;

    // Prevent panning too far left
    translateX = Math.min(translateX, 0);
    // Prevent panning too far right
    translateX = Math.max(translateX, containerWidth - scaledWidth);
    // Prevent panning too far up
    translateY = Math.min(translateY, 0);
    // Prevent panning too far down
    translateY = Math.max(translateY, containerHeight - scaledHeight);

    updateTransform();
});

zoomContainer.addEventListener('mouseup', () => {
    isPanning = false;
    zoomContainer.style.cursor = 'grab';
});

zoomContainer.addEventListener('mouseleave', () => {
    isPanning = false;
    zoomContainer.style.cursor = 'grab';
});



